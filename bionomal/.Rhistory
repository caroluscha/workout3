return (check_trials(trials))
}
else if (check_prob(prob) != TRUE) {
return (check_prob(prob))
}
else {
bprob <- bin_choose(trials, success) *
prob ^ success *
(1 - prob) ^ (trials - success)
return (bprob)
}
}
bin_probability(success = 2, trials = 5, prob = 0.5)
bin_probability(success = 2, trials = 5, prob = 0.5)
bin_probability <- function(success, trials, prob) {
if (check_success(success, trials) != TRUE){
return (check_success(success, trials))
}
else if (check_trials(trials) != TRUE) {
return (check_trials(trials))
}
else if (check_prob(prob) != TRUE) {
return (check_prob(prob))
}
else {
bprob <- bin_choose(trials, success) *
prob ^ success *
(1 - prob) ^ (trials - success)
return (bprob)
}
}
bin_probability(success = 2, trials = 5, prob = 0.5)
#' @title binomial choose
#' @description alculates the number of combinations in which k successes can occur in n trials
#' @param n number of trials
#' @param k number of successes
#' @return combinations of trials and success given n and k
bin_choose <- function(n, k){
if (n > k) {
bchoose <- factorial(n) / (factorial(k) * factorial(n - k))
return (bchoose)
}
else {
stop("k cannot be greater than n")
}
}
bin_probability <- function(success, trials, prob) {
if (check_success(success, trials) != TRUE){
return (check_success(success, trials))
}
else if (check_trials(trials) != TRUE) {
return (check_trials(trials))
}
else if (check_prob(prob) != TRUE) {
return (check_prob(prob))
}
else {
bprob <- bin_choose(trials, success) *
prob ^ success *
(1 - prob) ^ (trials - success)
return (bprob)
}
}
bin_probability(success = 2, trials = 5, prob = 0.5)
source('C:/Users/Carolus/Google Drive/stat133/workouts/workout03/bionomal/R/binomial.R')
source('C:/Users/Carolus/Google Drive/stat133/workouts/workout03/bionomal/R/binomial.R')
class(bin_distribution(trials = 5, prob = 0.5))
#' @title binomal distribution
#' @description calculates the binomial distribution given number of trials and probability of success
#' @param trials number of trials (non-negative integer)
#' @param prob probability of success (real number between 0 and 1)
#' @return data frame with binomial distribution with class "bindis"
#' @example bin_distribution(trials = 5, prob = 0.5)
#' @export
bin_distribution <- function (trials, prob) {
success = c(0:trials)
bprob_series <- vector("double")
for (i in success) {
bprob <- bin_probability(i, trials, prob)
bprob_series[i+1] <- bprob
}
bindis <- data.frame("success" = success, "probability" = bprob_series)
as(bindis, "bindis")
return(bindis)
}
class(bin_distribution(trials = 5, prob = 0.5))
#' @title binomal distribution
#' @description calculates the binomial distribution given number of trials and probability of success
#' @param trials number of trials (non-negative integer)
#' @param prob probability of success (real number between 0 and 1)
#' @return data frame with binomial distribution with class "bindis"
#' @example bin_distribution(trials = 5, prob = 0.5)
#' @export
bin_distribution <- function (trials, prob) {
#' @title binomal distribution
#' @description calculates the binomial distribution given number of trials and probability of success
#' @param trials number of trials (non-negative integer)
#' @param prob probability of success (real number between 0 and 1)
#' @return data frame with binomial distribution with class "bindis"
#' @example bin_distribution(trials = 5, prob = 0.5)
#' @export
bin_distribution <- function (trials, prob) {
success = c(0:trials)
bprob_series <- vector("double")
for (i in success) {
bprob <- bin_probability(i, trials, prob)
bprob_series[i+1] <- bprob
}
bindis <- data.frame("success" = success, "probability" = bprob_series)
as(bindis, c("bindis", "data.frame"))
return(bindis)
}
class(bin_distribution(trials = 5, prob = 0.5))
class(bin_distribution(trials = 5, prob = 0.5))
#' @title binomal distribution
#' @description calculates the binomial distribution given number of trials and probability of success
#' @param trials number of trials (non-negative integer)
#' @param prob probability of success (real number between 0 and 1)
#' @return data frame with binomial distribution with class "bindis"
#' @example bin_distribution(trials = 5, prob = 0.5)
#' @export
bin_distribution <- function (trials, prob) {
success = c(0:trials)
bprob_series <- vector("double")
for (i in success) {
bprob <- bin_probability(i, trials, prob)
bprob_series[i+1] <- bprob
}
bindis <- data.frame("success" = success, "probability" = bprob_series)
as(bindis, "bindis", "data.frame")
return(bindis)
}
class(bin_distribution(trials = 5, prob = 0.5))
as(bindis, "bindis")
#' @title binomal distribution
#' @description calculates the binomial distribution given number of trials and probability of success
#' @param trials number of trials (non-negative integer)
#' @param prob probability of success (real number between 0 and 1)
#' @return data frame with binomial distribution with class "bindis"
#' @example bin_distribution(trials = 5, prob = 0.5)
#' @export
bin_distribution <- function (trials, prob) {
success = c(0:trials)
bprob_series <- vector("double")
for (i in success) {
bprob <- bin_probability(i, trials, prob)
bprob_series[i+1] <- bprob
}
bindis <- data.frame("success" = success, "probability" = bprob_series)
as(bindis, "bindis")
return(bindis)
}
#' @title binomal distribution
#' @description calculates the binomial distribution given number of trials and probability of success
#' @param trials number of trials (non-negative integer)
#' @param prob probability of success (real number between 0 and 1)
#' @return data frame with binomial distribution with class "bindis"
#' @example bin_distribution(trials = 5, prob = 0.5)
#' @export
bin_distribution <- function (trials, prob) {
success = c(0:trials)
bprob_series <- vector("double")
for (i in success) {
bprob <- bin_probability(i, trials, prob)
bprob_series[i+1] <- bprob
}
bindis <- data.frame("success" = success, "probability" = bprob_series)
as(bindis, "bindis")
return(bindis)
}
class(bin_distribution(trials = 5, prob = 0.5))
function
@export
#' @title binomal distribution
#' @description calculates the binomial distribution given number of trials and probability of success
#' @param trials number of trials (non-negative integer)
#' @param prob probability of success (real number between 0 and 1)
#' @return data frame with binomial distribution with class "bindis"
#' @example bin_distribution(trials = 5, prob = 0.5)
#' @export
bin_distribution <- function (trials, prob) {
success = c(0:trials)
bprob_series <- vector("double")
for (i in success) {
bprob <- bin_probability(i, trials, prob)
bprob_series[i+1] <- bprob
}
bindis <- data.frame("success" = success, "probability" = bprob_series)
class(bindis) <- append(class(bindis), "bindis")
return(bindis)
}
class(bin_distribution(trials = 5, prob = 0.5))
#' @export
plot.bindis <- function(bindis) {
library(ggplot2)
ggplot(datbindis)
}
dis1 <- bin_distribution(trials = 5, prob = 0.5)
#' @export
plot.bindis <- function(bindis) {
library(ggplot2)
ggplot(data = bindis, aes(x = success, y = probability)) +
geom_histogram()
}
plot.bindis(dis1)
dis1 <- bin_distribution(trials = 5, prob = 0.5)
dis1
plot.bindis(dis1)
#' @export
plot.bindis <- function(bindis) {
library(ggplot2)
ggplot(data = bindis, aes(success, probability)) +
geom_histogram()
}
plot.bindis(dis1)
#' @export
plot.bindis <- function(bindis) {
library(ggplot2)
ggplot(data = bindis, aes(probability)) +
geom_histogram()
}
plot.bindis(dis1)
#' @export
plot.bindis <- function(bindis) {
library(ggplot2)
ggplot(data = bindis, mapping = aes(success, probability)) +
geom_col()
}
plot.bindis(dis1)
#' @export
plot.bindis <- function(bindis) {
library(ggplot2)
ggplot(data = bindis, mapping = aes(success, probability)) +
geom_col() +
scale_x_discrete(breaks=c(0: trials))
}
plot.bindis(dis1)
#' @export
plot.bindis <- function(bindis) {
library(ggplot2)
bindis
ggplot(data = bindis, mapping = aes(success, probability)) +
geom_col() +
scale_x_discrete(breaks=c(0: trials))
}
plot.bindis(dis1)
#' @export
plot.bindis <- function(bindis) {
library(ggplot2)
ggplot(data = bindis, mapping = aes(success, probability)) +
geom_col() +
scale_x_discrete(breaks= success)
}
plot.bindis(dis1)
ggplot(data = bindis, mapping = aes(success, probability)) +
geom_col() +
scale_x_discrete(breaks= c(success))
#' @export
plot.bindis <- function(bindis) {
library(ggplot2)
ggplot(data = bindis, mapping = aes(success, probability)) +
geom_col() +
scale_x_discrete(breaks= c(success))
}
plot.bindis(dis1)
#' @export
plot.bindis <- function(bindis) {
library(ggplot2)
ggplot(data = bindis, mapping = aes(success, probability)) +
geom_col() +
scale_x_discrete()
}
plot.bindis(dis1)
ggplot(data = bindis, mapping = aes(success, probability)) +
geom_col() +
scale_x_discrete(breaks = success)
#' @export
plot.bindis <- function(bindis) {
library(ggplot2)
ggplot(data = bindis, mapping = aes(success, probability)) +
geom_col() +
scale_x_discrete(breaks = success)
}
plot.bindis(dis1)
#' @export
plot.bindis <- function(bindis) {
library(ggplot2)
ggplot(data = bindis, mapping = aes(success, probability)) +
geom_col() +
scale_x_discrete(breaks = bindis$success)
}
plot.bindis(dis1)
#' @export
plot.bindis <- function(bindis) {
library(ggplot2)
ggplot(data = bindis, mapping = aes(success, probability)) +
geom_col() +
scale_x_discrete(breaks = bindis$success)
}
plot.bindis(dis1)
#' @export
plot.bindis <- function(bindis) {
library(ggplot2)
ggplot(data = bindis, mapping = aes(success, probability)) +
geom_col() +
scale_x_discrete(breaks = bindis$success, labels = bindis$success)
}
plot.bindis(dis1)
#' @export
plot.bindis <- function(bindis) {
library(ggplot2)
ggplot(data = bindis, mapping = aes(success, probability)) +
geom_col()
}
plot.bindis(dis1)
#' @export
plot.bindis <- function(bindis) {
library(ggplot2)
ggplot(data = bindis, mapping = aes(success, probability)) +
geom_col() +
xlab(success)
}
plot.bindis(dis1)
#' @export
plot.bindis <- function(bindis) {
library(ggplot2)
ggplot(data = bindis, mapping = aes(success, probability)) +
geom_col() +
xlab(bindis$success)
}
plot.bindis(dis1)
#' @export
plot.bindis <- function(bindis) {
library(ggplot2)
ggplot(data = bindis, mapping = aes(success, probability)) +
geom_col() +
axis(labels = bindis$success)
}
plot.bindis(dis1)
#' @export
plot.bindis <- function(bindis) {
library(ggplot2)
ggplot(data = bindis, mapping = aes(success, probability)) +
geom_col() +
axis(side = 1,labels = bindis$success)
}
plot.bindis(dis1)
#' @export
plot.bindis <- function(bindis) {
library(ggplot2)
ggplot(data = bindis, mapping = aes(success, probability)) +
geom_col() +
axis(side = 1,labels = bindis$success)
}
plot.bindis(dis1)
#' @export
plot.bindis <- function(bindis) {
library(ggplot2)
ggplot(data = bindis, mapping = aes(success, probability)) +
geom_col()
}
plot.bindis(dis1)
#' @export
plot.bindis <- function(bindis) {
library(ggplot2)
ggplot(data = bindis, mapping = aes(success, probability)) +
geom_col() +
scale_x_discrete(name = success, breaks = success)
}
plot.bindis(dis1)
#' @export
plot.bindis <- function(bindis) {
library(ggplot2)
ggplot(data = bindis, mapping = aes(success, probability)) +
geom_col() +
scale_x_discrete(name = bindis$success, breaks = bindis$success)
}
plot.bindis(dis1)
#' @title binomial cumulative distribution
#'
bin_cumulative <- function(trials, prob) {
bindis <- bin_distribution(trials, prob)
bincum_series <- vector("double")
bincum_series[1] <- bindis[1]
success = c(0:trials)
for (i in 1:(length(success)-1)) {
bcum <- bincum_series[i] + bindis[i+1]
bincum_series[i+1] <- bcum
}
bindis$cumulative <- bincum_series
bincum <- bindis
return(bincum)
}
bin_cumulative(trials = 5, prob = 0.5)
#' @title binomial cumulative distribution
#'
bin_cumulative <- function(trials, prob) {
bindis <- bin_distribution(trials, prob)
bincum_series <- vector("double")
bincum_series[1] <- bindis$probability[1]
success = c(0:trials)
for (i in 1:(length(success)-1)) {
bcum <- bincum_series[i] + bindis$probability[i+1]
bincum_series[i+1] <- bcum
}
bindis$cumulative <- bincum_series
bincum <- bindis
return(bincum)
}
bin_cumulative(trials = 5, prob = 0.5)
class(bin_cumulative(trials = 5, prob = 0.5))
#' @title binomial cumulative distribution
#'
bin_cumulative <- function(trials, prob) {
bindis <- bin_distribution(trials, prob)
bincum_series <- vector("double")
bincum_series[1] <- bindis$probability[1]
success = c(0:trials)
for (i in 1:(length(success)-1)) {
bcum <- bincum_series[i] + bindis$probability[i+1]
bincum_series[i+1] <- bcum
}
bindis$cumulative <- bincum_series
bincum <- bindis
as.data.frame(bincum)
return(bincum)
}
class(bin_cumulative(trials = 5, prob = 0.5))
#' @title binomial cumulative distribution
#'
bin_cumulative <- function(trials, prob) {
bindis <- bin_distribution(trials, prob)
bincum_series <- vector("double")
bincum_series[1] <- bindis$probability[1]
success = c(0:trials)
for (i in 1:(length(success)-1)) {
bcum <- bincum_series[i] + bindis$probability[i+1]
bincum_series[i+1] <- bcum
}
bincum <- data.frame("success" = bindis$success,
"probability" = bindis$probability,
"cumulative" = bincum_series)
return(bincum)
}
class(bin_cumulative(trials = 5, prob = 0.5))
#' @title binomial cumulative distribution
#'
bin_cumulative <- function(trials, prob) {
bindis <- bin_distribution(trials, prob)
bincum_series <- vector("double")
bincum_series[1] <- bindis$probability[1]
success = c(0:trials)
for (i in 1:(length(success)-1)) {
bcum <- bincum_series[i] + bindis$probability[i+1]
bincum_series[i+1] <- bcum
}
bincum <- data.frame("success" = bindis$success,
"probability" = bindis$probability,
"cumulative" = bincum_series)
class(bincum) <- append(class(bincum), "bincum")
return(bincum)
}
class(bin_cumulative(trials = 5, prob = 0.5))
#' @title binomial cumulative distribution
#'
#'
#' @export
bin_cumulative <- function(trials, prob) {
bindis <- bin_distribution(trials, prob)
bincum_series <- vector("double")
bincum_series[1] <- bindis$probability[1]
success = c(0:trials)
for (i in 1:(length(success)-1)) {
bcum <- bincum_series[i] + bindis$probability[i+1]
bincum_series[i+1] <- bcum
}
bincum <- data.frame("success" = bindis$success,
"probability" = bindis$probability,
"cumulative" = bincum_series)
class(bincum) <- append(class(bincum), "bincum")
return(bincum)
}
#' @export
plot.bindis <- function(bincum) {
library(ggplot2)
ggplot(data = bincum, mapping = aes(success, cumulative)) +
geom_line()
}
dis2 <- bin_cumulative(trials = 5, prob = 0.5)
plot.bindis(dis2)
source("R/binomial.R")
source("R/binomial.R")
context("check binomial functions")
library(testthat)
context("check binomial functions")
test_that("check_prob with number between 0 and 1", {
expect_true(check_prob(0.5))
expect_true(check_prob(prob = 0.5))
})
library(testthat)
library(binomial)
test_that("check_prob with number between 0 and 1", {
expect_true(check_prob(0.5))
expect_true(check_prob(prob = 0.5))
})
devtools::use_testthat()
install.packages(c("devtools", "roxygen2", "testthat", "knitr"))
install.packages(c("devtools", "roxygen2", "testthat", "knitr"))
install.packages("rstudioapi")
rstudioapi::isAvailable("0.99.149")
devtools::install_github("r-lib/devtools")
library(roxygen2)
